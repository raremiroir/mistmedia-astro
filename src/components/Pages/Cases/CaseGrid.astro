---
import { t } from 'i18next';
import type { DocumentData } from 'firebase/firestore';
import type { Locales } from '@/types';

import { gaps } from '@/consts/style'

import SolutionPortfolioCard from '../Solutions/Common/SolutionPortfolioCard.astro';
import db from '@/firebase';
import CaseCard from './CaseCard.svelte';

   export interface Props {
      portfolio: DocumentData[];
      lang: Locales;
   }

   const { portfolio, lang } = Astro.props;

   // const allTags = await db.doc.fetch.collection('tags');
   // const allSolutions = await db.doc.fetch.collection('solutions');
   // const allClients = await db.doc.fetch.collection('clients');

   // If portfolio is empty, or if there are no enabled items, set to true
   const noEnabledItems = portfolio.length === 0 || portfolio.filter( item => item.enabled ).length === 0;
---

<div class={`w-full flex flex-col ${gaps}`}>
   <!-- FILTERS -->
   <!-- <CaseFilters 
      client:load
      tags={allTags.map( tag => ({ value: tag.id, label: tag.title[lang] }))}
      solutions={allSolutions.map( solution => ({ value: solution.id, label: t(`services:solutions.${solution.id}.title_short`) }))}
      clients={allClients.map( client => ({ value: client.id, label: client.name }))}
   /> -->

   <!-- CASES GRID -->
   <ul class={`w-full grid grid-cols-1 md:grid-cols-2 ${gaps}`}>
      { !noEnabledItems ? (
         portfolio.map( (item, key) => (
            item.enabled && (
               <><CaseCard 
                  client:load
                  class={`w-5/6 md:w-full ${ (key % 2 !== 0) || (key === 0) ? 'place-self-start' : 'place-self-end' } mb-2`}
                  key={key}
                  title={item.title}
                  description={item.description[lang]}
                  slug={item.slug}
               >
                  <SolutionPortfolioCard 
                     slot="card"
                     lang={lang} 
                     item={{
                        enabled: item.enabled,
                        id: item.id,
                        title: item.title,
                        description: item.description[lang],
                        slug: item.slug,
                        client: item.client,
                        images: item.images,
                        solution_type: item.solution_type,
                        tags: item.tags,
                     }} />
               </CaseCard></>
            )
         ))
      ) : (
         <span>{t('message.no_items')}</span>
      )}
   </ul>
</div>
