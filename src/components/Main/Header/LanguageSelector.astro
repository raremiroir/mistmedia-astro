---
import { t } from "i18next";

import i18next from "i18next";
import { localizePath } from "astro-i18next";

import { localeFlags, localeNames } from "@utils/i18n";

import Icon from "astro-icon";

import Button from "@comp/Common/Button/Button.svelte";

interface languageMapping {
  [localeCode: string]: string;
}

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
  languageMapping?: languageMapping;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const { languageMapping, ...attributes } = Astro.props;
---

<script>
  const triggerBtn = document.getElementById("lang_select_trigger");
  const langSelect = document.getElementById("lang_select");
  triggerBtn?.addEventListener("click", () => {
    langSelect?.classList.toggle("hidden");
  });
</script>

<div class="relative">
  <Button 
    client:load 
    id='lang_select_trigger' 
    ariaLabel={`${t("common:btn.switch_lang")}`} title={`${t("common:btn.switch_lang")}`}
    variant="minimal" color="surface_alt" square size="xs" shadow="none">
    <Icon class="h-6 w-auto" name='tabler:language' />
  </Button>
  
  <div 
    id="lang_select"
    class="absolute top-12 -left-4 rounded-xl overflow-hidden"
    {...attributes}
  >
    {
      supportedLanguages.map((supportedLanguage: string) => {
        let value = localizePath(pathname, supportedLanguage);
  
        return (
          <a href={value} 
            class="
              flex flex-row items-center jutify-start gap-2 
              px-4 py-2
              bg-surface-300 dark:bg-surface-700 hover:bg-surface-400 dark:hover:bg-surface-600">
  
              <div class="w-6 h-6 rounded-full overflow-hidden border-primary border">
                <Icon class="w-full h-auto" name={`emojione:${localeFlags[supportedLanguage]}`} />
              </div>
              <div class="flex flex-col gap-0 items-start justify-center text-surface-800 dark:text-surface-200">
                <span class="font-semibold">{t("common:geo." + supportedLanguage + ".lang")}</span>
                <span class="text-sm italic">{ localeNames[supportedLanguage] }</span>
              </div>
          </a>
        );
      })
    }
  </div>
</div>  
