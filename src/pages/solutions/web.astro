---
import i18next, { t, changeLanguage } from "i18next";
// Astro components
import Section from "@/components/Core/Section/Section.astro";
// Svelte components
import Drawer from "@/components/Common/Drawer/Drawer.svelte";
// Import feature sidebar components
import FeatureModalContent from "@/components/Pages/Solutions/FeatureModalContent.astro";
import WebFeatResponsive from "@/components/Pages/Solutions/Features/WebFeatResponsive.astro";
import SolutionLayout from "@/layouts/SolutionLayout.astro";
import SolutionServices from "@/components/Pages/Solutions/Common/SolutionServices.astro";
import db from "@/firebase";
import SolutionFeatureCard from "@/components/Pages/Solutions/Common/SolutionFeatureCard.astro";
import CaseGrid from "@/components/Pages/Cases/CaseGrid.astro";
import type { Locales } from "@/types";
import { gaps } from "@/consts/style";

changeLanguage("nl");

const lang = i18next.language as Locales;
const key = "web";
const portfolio = await db.custom.filter.by.categoryFromPortfolio(key) || [];
const services = await db.doc.fetch.collection(`solutions/${key}/services`);
const features = await db.doc.fetch.collection(`solutions/${key}/features`);
let featureCards: {
    [key: string]: string;
}[] = [];
features.forEach((feature) => {
    featureCards.push({
        id: feature.id,
        title: t(`services:solutions.${key}.features.${feature.id}.title`),
        description: t(`services:solutions.${key}.features.${feature.id}.description`),
        icon: feature.icon
    });
});
export const prerender = true;
---

<SolutionLayout 
title={`${t(`services:solutions.${key}.title`)}`}
subtitle={`${t(`services:solutions.${key}.description`)}`}
>
	<!-- FEATURES -->
	<Section name="features">
		<div class=`w-full grid grid-cols-2 lg:grid-cols-4 ${gaps}`>
			{featureCards.map((feature) => (
				<><Drawer client:idle>
					<SolutionFeatureCard 
						slot="trigger"
						title={feature.title}
						icon={feature.icon}
					/>

					<div slot='title'>
						{feature.title}
					</div>
					{() => {
						if (!feature.id) 						return (<></>);
						if (feature.id === 'responsive') return (<><WebFeatResponsive/></>);
						else return (<>
						<FeatureModalContent 
							solution={key} feature={feature.id} 
							hasTitle={feature.id === 'accessible' || feature.id === 'seo'}
							hasQuote={feature.id === 'accessible'}
						/></>);
					}}
				</Drawer></>
			))}
		</div>
	</Section>
	<!-- END FEATURES -->

	<!-- SERVICES -->
	<SolutionServices key={key} services={services} />
	<!-- END SERVICES -->	

	<!-- PORTFOLIO -->
	<Section fullWidthAppend name="portfolio" title={`${t(`services:main.sections.portfolio.title`)}`} subtitle={`${t(`services:main.sections.portfolio.subtitle`)}`}>
		<CaseGrid portfolio={portfolio} lang={lang} />
	</Section>
	<!-- END PORTFOLIO -->

	<!-- PRICING -->
	<!-- <Section fullWidthAppend name="web-pricing" title="Transparent Pricing" subtitle="Because we both know that's what's important.">
		Cards here
	</Section> -->
	<!-- END PRICING -->

	<!-- PRICING CALCULATOR -->
	<!-- <Section fullWidthAppend alt name="web-pricing-calculator" title="Estimate your Price" subtitle="Get an estimated price using our price calculation tool!">
		Calculator here
	</Section> -->
	<!-- END PRICING -->
</SolutionLayout>
